#summary The jQuery html5upload Plugin API provides a simple method that allows you to easily upload files.

= html5upload =

The `html5upload` method uploads the form through AJAX using the XMLHttpRequest and File APIs from HTML5. This effectively removes the need of using iframe and flash hacks to upload files via AJAX. The most common use case of this method is for the submission of a form that uploads 1 or more files. This method can also be used on an individual file input so that a file can be uploaded without having to the submit the whole form.

== Parameters ==

=== options ===
`options` is an `object` containing 1 or more of the following fields:
  * `data`: `data` is an `object` containing key-value pairs of any additional fields to send along with the file upload.

  * `onAbort`: `onAbort` is a `callback` function that is called when the upload is aborted. The `callback` is passed the `event object` from the underlying `XMLHttpRequest.onabort` or `XMLHttpRequest.upload.onabort` event in its first parameter.

  * `onError`: `onError` is a `callback` function that is called when an error occurs during the upload. The `callback` is passed the `event object` from the underlying `XMLHttpRequest.onerror` or `XMLHttpRequest.upload.onerror` event in its first parameter.

  * `onLoad`: `onLoad` is a `callback` function that is called when the files are done being uploaded. The `callback` is passed the `event object` from the underlying `XMLHttpRequest.onload` event in its first parameter, and the original `XMLHttpRequest object` in its second parameter.

  * `onProgress`: `onProgress` is a `callback` function that is called multiple times during the progress of the upload. The `callback` is passed the `event object` in its first parameter from the underlying `XMLHttpRequest.upload.onprogress` event in its first parameter.

  * `sendFormData`: If `true`, all of the form's data fields will be sent along with the file upload; otherwise, the form's data fields will be ignored. This option is ignored if this method was called on a file input.

  * `url`: `url` is the URL to upload to. If `url` is empty or not specified, then the URL of the current page will be used.


== Examples ==

Using html5upload on a form:
{{{
$('#my_form').html5upload({
  url: '/upload-with-response.php',
  sendFormData: true,
  onAbort: function(event) {
    alert('The file transfer was aborted!');
  },
  onError: function(event) {
    alert('An error occurred while during the file transfer!');
  },
  onProgress: function(event) {
    if (event.lengthComputable) {
      var percentage = Math.round(event.loaded / event.total * 100);
      $('#progress').html(percentage + '%');
    }
  },
  onLoad: function(event, xhr) {
    alert('The file transfer is complete! The transfer resulted in the response: ' + xhr.responseText);
  }
});
}}}

Using html5upload on a file input:
{{{
$('#my_file_input').html5upload({
  url: '/upload.php',
  onLoad: function(event, xhr) {
    alert('The file transfer is complete!');
  }
});
}}}